// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transactiontype.sql

package sqlc

import (
	"context"
)

const createTransactionType = `-- name: CreateTransactionType :one
INSERT INTO "TransactionTypes" (
  "transactiontype"
) VALUES (
  $1
)
RETURNING id, transactiontype
`

func (q *Queries) CreateTransactionType(ctx context.Context, transactiontype string) (TransactionType, error) {
	row := q.db.QueryRow(ctx, createTransactionType, transactiontype)
	var i TransactionType
	err := row.Scan(&i.ID, &i.Transactiontype)
	return i, err
}

const deleteTransactionType = `-- name: DeleteTransactionType :exec
DELETE FROM "TransactionTypes"
WHERE id = $1
`

func (q *Queries) DeleteTransactionType(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTransactionType, id)
	return err
}

const getTransactionType = `-- name: GetTransactionType :one
SELECT id, transactiontype FROM "TransactionTypes"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetTransactionType(ctx context.Context, id int64) (TransactionType, error) {
	row := q.db.QueryRow(ctx, getTransactionType, id)
	var i TransactionType
	err := row.Scan(&i.ID, &i.Transactiontype)
	return i, err
}

const listTransactionTypes = `-- name: ListTransactionTypes :many
SELECT id, transactiontype FROM "TransactionTypes"
ORDER BY "transactiontype"
`

func (q *Queries) ListTransactionTypes(ctx context.Context) ([]TransactionType, error) {
	rows, err := q.db.Query(ctx, listTransactionTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TransactionType
	for rows.Next() {
		var i TransactionType
		if err := rows.Scan(&i.ID, &i.Transactiontype); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransactionType = `-- name: UpdateTransactionType :exec
UPDATE "TransactionTypes"
  set "transactiontype" = $2
WHERE id = $1
`

type UpdateTransactionTypeParams struct {
	ID              int64
	Transactiontype string
}

func (q *Queries) UpdateTransactionType(ctx context.Context, arg UpdateTransactionTypeParams) error {
	_, err := q.db.Exec(ctx, updateTransactionType, arg.ID, arg.Transactiontype)
	return err
}
