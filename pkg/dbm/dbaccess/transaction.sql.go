// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transaction.sql

package dbm

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO "Transactions" (
  "fromaccount_id", "toaccount_id", "transactiontype_id", "transdate", "amount", "transactioncategory_id", "notes"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, fromaccount_id, toaccount_id, transactiontype_id, transdate, amount, transactioncategory_id, notes
`

type CreateTransactionParams struct {
	FromaccountID         int64
	ToaccountID           int64
	TransactiontypeID     int64
	Transdate             pgtype.Date
	Amount                pgtype.Numeric
	TransactioncategoryID pgtype.Int8
	Notes                 pgtype.Text
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.FromaccountID,
		arg.ToaccountID,
		arg.TransactiontypeID,
		arg.Transdate,
		arg.Amount,
		arg.TransactioncategoryID,
		arg.Notes,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromaccountID,
		&i.ToaccountID,
		&i.TransactiontypeID,
		&i.Transdate,
		&i.Amount,
		&i.TransactioncategoryID,
		&i.Notes,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM "Transactions"
WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTransaction, id)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, fromaccount_id, toaccount_id, transactiontype_id, transdate, amount, transactioncategory_id, notes FROM "Transactions"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromaccountID,
		&i.ToaccountID,
		&i.TransactiontypeID,
		&i.Transdate,
		&i.Amount,
		&i.TransactioncategoryID,
		&i.Notes,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, fromaccount_id, toaccount_id, transactiontype_id, transdate, amount, transactioncategory_id, notes FROM "Transactions"
ORDER BY "transdate"
`

func (q *Queries) ListTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.FromaccountID,
			&i.ToaccountID,
			&i.TransactiontypeID,
			&i.Transdate,
			&i.Amount,
			&i.TransactioncategoryID,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :exec
UPDATE "Transactions"
  set "fromaccount_id" = $2,
  "toaccount_id" = $3,
  "transactiontype_id" = $4,
  "transdate" = $5,
  "amount" = $6,
  "transactioncategory_id" = $7, 
  "notes" = $8
WHERE id = $1
`

type UpdateTransactionParams struct {
	ID                    int64
	FromaccountID         int64
	ToaccountID           int64
	TransactiontypeID     int64
	Transdate             pgtype.Date
	Amount                pgtype.Numeric
	TransactioncategoryID pgtype.Int8
	Notes                 pgtype.Text
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) error {
	_, err := q.db.Exec(ctx, updateTransaction,
		arg.ID,
		arg.FromaccountID,
		arg.ToaccountID,
		arg.TransactiontypeID,
		arg.Transdate,
		arg.Amount,
		arg.TransactioncategoryID,
		arg.Notes,
	)
	return err
}
