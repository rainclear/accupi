// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: owner.sql

package dbm

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOwner = `-- name: CreateOwner :one
INSERT INTO "Owners" (
  "ownername", "emailaddress", "birthdate"
) VALUES (
  $1, $2, $3
)
RETURNING id, ownername, emailaddress, birthdate
`

type CreateOwnerParams struct {
	Ownername    string
	Emailaddress string
	Birthdate    pgtype.Date
}

func (q *Queries) CreateOwner(ctx context.Context, arg CreateOwnerParams) (Owner, error) {
	row := q.db.QueryRow(ctx, createOwner, arg.Ownername, arg.Emailaddress, arg.Birthdate)
	var i Owner
	err := row.Scan(
		&i.ID,
		&i.Ownername,
		&i.Emailaddress,
		&i.Birthdate,
	)
	return i, err
}

const deleteOwner = `-- name: DeleteOwner :exec
DELETE FROM "Owners"
WHERE id = $1
`

func (q *Queries) DeleteOwner(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOwner, id)
	return err
}

const getOwner = `-- name: GetOwner :one
SELECT id, ownername, emailaddress, birthdate FROM "Owners"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetOwner(ctx context.Context, id int64) (Owner, error) {
	row := q.db.QueryRow(ctx, getOwner, id)
	var i Owner
	err := row.Scan(
		&i.ID,
		&i.Ownername,
		&i.Emailaddress,
		&i.Birthdate,
	)
	return i, err
}

const listOwners = `-- name: ListOwners :many
SELECT id, ownername, emailaddress, birthdate FROM "Owners"
ORDER BY "ownername"
`

func (q *Queries) ListOwners(ctx context.Context) ([]Owner, error) {
	rows, err := q.db.Query(ctx, listOwners)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Owner
	for rows.Next() {
		var i Owner
		if err := rows.Scan(
			&i.ID,
			&i.Ownername,
			&i.Emailaddress,
			&i.Birthdate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOwner = `-- name: UpdateOwner :exec
UPDATE "Owners"
  set "ownername" = $2,
  "emailaddress" = $3,
  "birthdate" = $4
WHERE id = $1
`

type UpdateOwnerParams struct {
	ID           int64
	Ownername    string
	Emailaddress string
	Birthdate    pgtype.Date
}

func (q *Queries) UpdateOwner(ctx context.Context, arg UpdateOwnerParams) error {
	_, err := q.db.Exec(ctx, updateOwner,
		arg.ID,
		arg.Ownername,
		arg.Emailaddress,
		arg.Birthdate,
	)
	return err
}
