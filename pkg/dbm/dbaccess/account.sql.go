// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account.sql

package dbaccess

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO "Accounts" (
  "owner_id", "currency_id", "accounttype_id", "accountname", "openingbalance", "openingdate", "balance", "institution", "accountnumber", "accountcategory_id", "notes"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, owner_id, currency_id, accounttype_id, accountname, openingbalance, openingdate, balance, institution, accountnumber, accountcategory_id, notes
`

type CreateAccountParams struct {
	OwnerID           int64
	CurrencyID        int64
	AccounttypeID     int64
	Accountname       string
	Openingbalance    pgtype.Numeric
	Openingdate       pgtype.Date
	Balance           pgtype.Numeric
	Institution       pgtype.Text
	Accountnumber     pgtype.Text
	AccountcategoryID pgtype.Int8
	Notes             pgtype.Text
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.OwnerID,
		arg.CurrencyID,
		arg.AccounttypeID,
		arg.Accountname,
		arg.Openingbalance,
		arg.Openingdate,
		arg.Balance,
		arg.Institution,
		arg.Accountnumber,
		arg.AccountcategoryID,
		arg.Notes,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.CurrencyID,
		&i.AccounttypeID,
		&i.Accountname,
		&i.Openingbalance,
		&i.Openingdate,
		&i.Balance,
		&i.Institution,
		&i.Accountnumber,
		&i.AccountcategoryID,
		&i.Notes,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM "Accounts"
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, owner_id, currency_id, accounttype_id, accountname, openingbalance, openingdate, balance, institution, accountnumber, accountcategory_id, notes FROM "Accounts"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.CurrencyID,
		&i.AccounttypeID,
		&i.Accountname,
		&i.Openingbalance,
		&i.Openingdate,
		&i.Balance,
		&i.Institution,
		&i.Accountnumber,
		&i.AccountcategoryID,
		&i.Notes,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, owner_id, currency_id, accounttype_id, accountname, openingbalance, openingdate, balance, institution, accountnumber, accountcategory_id, notes FROM "Accounts"
ORDER BY "accountname"
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.CurrencyID,
			&i.AccounttypeID,
			&i.Accountname,
			&i.Openingbalance,
			&i.Openingdate,
			&i.Balance,
			&i.Institution,
			&i.Accountnumber,
			&i.AccountcategoryID,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE "Accounts"
  set "owner_id" = $2,
  "currency_id" = $3,
  "accounttype_id" = $4,
  "accountname" = $5,
  "openingbalance" = $6,
  "openingdate" = $7,
  "balance" = $8,
  "institution" = $9,
  "accountnumber" = $10,
  "accountcategory_id" = $11,
  "notes" = $12
WHERE id = $1
`

type UpdateAccountParams struct {
	ID                int64
	OwnerID           int64
	CurrencyID        int64
	AccounttypeID     int64
	Accountname       string
	Openingbalance    pgtype.Numeric
	Openingdate       pgtype.Date
	Balance           pgtype.Numeric
	Institution       pgtype.Text
	Accountnumber     pgtype.Text
	AccountcategoryID pgtype.Int8
	Notes             pgtype.Text
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.Exec(ctx, updateAccount,
		arg.ID,
		arg.OwnerID,
		arg.CurrencyID,
		arg.AccounttypeID,
		arg.Accountname,
		arg.Openingbalance,
		arg.Openingdate,
		arg.Balance,
		arg.Institution,
		arg.Accountnumber,
		arg.AccountcategoryID,
		arg.Notes,
	)
	return err
}
