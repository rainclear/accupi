// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounttype.sql

package dbm

import (
	"context"
)

const createAccountType = `-- name: CreateAccountType :one
INSERT INTO "AccountTypes" (
  "accounttype"
) VALUES (
  $1
)
RETURNING id, accounttype
`

func (q *Queries) CreateAccountType(ctx context.Context, accounttype string) (AccountType, error) {
	row := q.db.QueryRow(ctx, createAccountType, accounttype)
	var i AccountType
	err := row.Scan(&i.ID, &i.Accounttype)
	return i, err
}

const deleteAccountType = `-- name: DeleteAccountType :exec
DELETE FROM "AccountTypes"
WHERE id = $1
`

func (q *Queries) DeleteAccountType(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAccountType, id)
	return err
}

const getAccountType = `-- name: GetAccountType :one
SELECT id, accounttype FROM "AccountTypes"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetAccountType(ctx context.Context, id int64) (AccountType, error) {
	row := q.db.QueryRow(ctx, getAccountType, id)
	var i AccountType
	err := row.Scan(&i.ID, &i.Accounttype)
	return i, err
}

const listAccountTypes = `-- name: ListAccountTypes :many
SELECT id, accounttype FROM "AccountTypes"
ORDER BY "accounttype"
`

func (q *Queries) ListAccountTypes(ctx context.Context) ([]AccountType, error) {
	rows, err := q.db.Query(ctx, listAccountTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountType
	for rows.Next() {
		var i AccountType
		if err := rows.Scan(&i.ID, &i.Accounttype); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountType = `-- name: UpdateAccountType :exec
UPDATE "AccountTypes"
  set "accounttype" = $2
WHERE id = $1
`

type UpdateAccountTypeParams struct {
	ID          int64
	Accounttype string
}

func (q *Queries) UpdateAccountType(ctx context.Context, arg UpdateAccountTypeParams) error {
	_, err := q.db.Exec(ctx, updateAccountType, arg.ID, arg.Accounttype)
	return err
}
