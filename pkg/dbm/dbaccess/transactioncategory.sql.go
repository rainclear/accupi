// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transactioncategory.sql

package dbm

import (
	"context"
)

const createTransactionCategory = `-- name: CreateTransactionCategory :one
INSERT INTO "TransactionCategories" (
  "transactioncategory"
) VALUES (
  $1
)
RETURNING id, transactioncategory
`

func (q *Queries) CreateTransactionCategory(ctx context.Context, transactioncategory string) (TransactionCategory, error) {
	row := q.db.QueryRow(ctx, createTransactionCategory, transactioncategory)
	var i TransactionCategory
	err := row.Scan(&i.ID, &i.Transactioncategory)
	return i, err
}

const deleteTransactionCategory = `-- name: DeleteTransactionCategory :exec
DELETE FROM "TransactionCategories"
WHERE id = $1
`

func (q *Queries) DeleteTransactionCategory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTransactionCategory, id)
	return err
}

const getTransactionCategory = `-- name: GetTransactionCategory :one
SELECT id, transactioncategory FROM "TransactionCategories"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetTransactionCategory(ctx context.Context, id int64) (TransactionCategory, error) {
	row := q.db.QueryRow(ctx, getTransactionCategory, id)
	var i TransactionCategory
	err := row.Scan(&i.ID, &i.Transactioncategory)
	return i, err
}

const listTransactionCategories = `-- name: ListTransactionCategories :many
SELECT id, transactioncategory FROM "TransactionCategories"
ORDER BY "transactioncategory"
`

func (q *Queries) ListTransactionCategories(ctx context.Context) ([]TransactionCategory, error) {
	rows, err := q.db.Query(ctx, listTransactionCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TransactionCategory
	for rows.Next() {
		var i TransactionCategory
		if err := rows.Scan(&i.ID, &i.Transactioncategory); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransactionCategory = `-- name: UpdateTransactionCategory :exec
UPDATE "TransactionCategories"
  set "transactioncategory" = $2
WHERE id = $1
`

type UpdateTransactionCategoryParams struct {
	ID                  int64
	Transactioncategory string
}

func (q *Queries) UpdateTransactionCategory(ctx context.Context, arg UpdateTransactionCategoryParams) error {
	_, err := q.db.Exec(ctx, updateTransactionCategory, arg.ID, arg.Transactioncategory)
	return err
}
