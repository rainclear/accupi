// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accountcategory.sql

package dbm

import (
	"context"
)

const createAccountCategory = `-- name: CreateAccountCategory :one
INSERT INTO "AccountCategories" (
  "accountcategory"
) VALUES (
  $1
)
RETURNING id, accountcategory
`

func (q *Queries) CreateAccountCategory(ctx context.Context, accountcategory string) (AccountCategory, error) {
	row := q.db.QueryRow(ctx, createAccountCategory, accountcategory)
	var i AccountCategory
	err := row.Scan(&i.ID, &i.Accountcategory)
	return i, err
}

const deleteAccountCategory = `-- name: DeleteAccountCategory :exec
DELETE FROM "AccountCategories"
WHERE id = $1
`

func (q *Queries) DeleteAccountCategory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAccountCategory, id)
	return err
}

const getAccountCategory = `-- name: GetAccountCategory :one
SELECT id, accountcategory FROM "AccountCategories"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetAccountCategory(ctx context.Context, id int64) (AccountCategory, error) {
	row := q.db.QueryRow(ctx, getAccountCategory, id)
	var i AccountCategory
	err := row.Scan(&i.ID, &i.Accountcategory)
	return i, err
}

const listAccountCategories = `-- name: ListAccountCategories :many
SELECT id, accountcategory FROM "AccountCategories"
ORDER BY "accountcategory"
`

func (q *Queries) ListAccountCategories(ctx context.Context) ([]AccountCategory, error) {
	rows, err := q.db.Query(ctx, listAccountCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountCategory
	for rows.Next() {
		var i AccountCategory
		if err := rows.Scan(&i.ID, &i.Accountcategory); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountCategory = `-- name: UpdateAccountCategory :exec
UPDATE "AccountCategories"
  set "accountcategory" = $2
WHERE id = $1
`

type UpdateAccountCategoryParams struct {
	ID              int64
	Accountcategory string
}

func (q *Queries) UpdateAccountCategory(ctx context.Context, arg UpdateAccountCategoryParams) error {
	_, err := q.db.Exec(ctx, updateAccountCategory, arg.ID, arg.Accountcategory)
	return err
}
